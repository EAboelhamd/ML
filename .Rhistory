setwd("~/OneDrive/QMSS III/ESL/Studying")
H <- matrix(readBin("histograms.bin", "double", 640000), 40000, 16)
dim(H)  # each row is a histogram with 16 bins
image(H)
c<-c(NA,NA,NA)
c
c+c(3,3,3)
d<-c(1,2,3)
d
c+d
d
sum(d)
setwd("~/OneDrive/QMSS III/ESL/Studying")
?apply
a<-c(1,2,3,4)
class(a)
is.vector(a)
a^2
is.vector(a^2)
sqrt(4)
a<-matrix(1:30,5,6)
a
apply(a, 1, FUN = function(x) (x - mean(x)) / sqrt(sum(x^2)))
rowSums(a[1])
rowSums(a[1,])
rowSums(a)
81/6
sqrt(sum(a[1, ]^2))
12.5/39.128
t(apply(a, 1, FUN = function(x) (x - mean(x)) / sqrt(sum(x^2))) )
a
0.5*A
0.5*a
0.5*a[1,]
a-0.5*a
norm(a-0.5*a,"O")
?which.max
a
apply(a,1,fun=which.max)
apply(a,1,fun=which.max())
apply(a,1,fun=function(x) which.max(x))
apply(a,1,FUN =which.max)
MultinomialEM <- function(H, K, tau) {
## Initialization
# Generate a random vector of K indices to choose from the histograms as initial centroids
init = sample(1:nrow(H), size = K, replace = F)
# Select chosen histograms as t, a k-by-d matrix, and normalize each row
t <- H[init, ]
t <- t(apply(t, 1, FUN = function(x) (x - mean(x)) / sqrt(sum(x^2))))
# Initialize the measure of assignment threshold to be Inf
delta <- Inf
# Initialize assignment probabilities matrix, n-by-d
A <- matrix(0, nrow(H), K)
# Initialize centroid parameters matrix, n-by-k
phi <- matrix(0, nrow(H), K)
# Arbitrarily initialize relative cluster size c, a vector of length K
c <- rep(1 / K, length.out = K)
# Initialize an intermediate matrix b to update the t matrix
b <- matrix(0, K, ncol(H))
# Initialize a hard assignment vector of length n
m <- rep(0, length.out = nrow(H))
# Use a while loop to implement the iteration and keep track of matrix A from previous step
while(delta >= tau) {
A_old = A
## E-step
for (i in 1:nrow(H)) {
for (k in 1:K) {
phi[i, k] = exp(sum(H[i, ] * log(t[k, ])))
A[i, k] = c[k] * phi[i, k] / sum(c * phi[i, ])
}
}
## M-step
for (k in 1:K) {
c[k] = sum(A[, k]) / nrow(H)
for (i in 1:nrow(H)) {
b[k, ] = b[k, ] + A[i, k] * H[i, ]
}
t[k, ] = b[k, ] / sum(b[k, ])
}
## Measurement of iteration
delta = norm(A - A_old, type = "O")
}
## Reparameterization
m <- apply(A, 1, FUN = which.max)
return(m)
}
h=H[100,16]
H <- matrix(readBin("histograms.bin", "double", 640000), 40000, 16)
dim(H)  # each row is a histogram with 16 bins
rowSums(head(H))  # sum of each row should be 121
h=H[100,16]
View(H)
h=rbind(H[1:100,1:16],H[39900:40000,1:16])
View(h)
result = MultinomialEM(h,3,1)
3>2==TRUE
Inf>3
Inf>=3
a<-Inf
Inf>Inf
Inf>=Inf
a<-Inf
b<-Inf
while(a>=b) {a<-1
return(a)}
while(a>=b) {a=1
return(a)}
while(a>=b) {a=1 return(a)}
while(a>=b) {a=1 return(a)}
while(a>=b) {a=1
print("aaa")}
while (i < 6) {
print(i)
i = i+1
}
i=3
while (i < 6) {
print(i)
i = i+1
}
MultinomialEM <- function(H, K, tau) {
## Initialization
# Generate a random vector of K indices to choose from the histograms as initial centroids
init = sample(1:nrow(H), size = K, replace = F)
# Select chosen histograms as t, a k-by-d matrix, and normalize each row
t <- H[init, ]
t <- t(apply(t, 1, FUN = function(x) (x - mean(x)) / sqrt(sum(x^2))))
# Initialize the measure of assignment threshold to be Inf
delta <- 123
# Initialize assignment probabilities matrix, n-by-d
A <- matrix(0, nrow(H), K)
# Initialize centroid parameters matrix, n-by-k
phi <- matrix(0, nrow(H), K)
# Arbitrarily initialize relative cluster size c, a vector of length K
c <- rep(1 / K, length.out = K)
# Initialize an intermediate matrix b to update the t matrix
b <- matrix(0, K, ncol(H))
# Initialize a hard assignment vector of length n
m <- rep(0, length.out = nrow(H))
# Use a while loop to implement the iteration and keep track of matrix A from previous step
while (delta >= tau) {
A_old = A
## E-step
for (i in 1:nrow(H)) {
for (k in 1:K) {
phi[i, k] = exp(sum(H[i, ] * log(t[k, ])))
A[i, k] = c[k] * phi[i, k] / sum(c * phi[i, ])
}
}
## M-step
for (k in 1:K) {
c[k] = sum(A[, k]) / nrow(H)
for (i in 1:nrow(H)) {
b[k, ] = b[k, ] + A[i, k] * H[i, ]
}
t[k, ] = b[k, ] / sum(b[k, ])
}
## Measurement of iteration
delta = norm(A - A_old, type = "O")
}
## Reparameterization
m <- apply(A, 1, FUN = which.max)
return(m)
}
result<-MultinomialEM(H=h,K=3,tau=1)
warnings()
